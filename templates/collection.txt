class {{collectionName}} extends AbstractCollection {

  {{{queryDefinitions}}}

  // STATIC --------------------------------------------------------------
  static modelName = "{{modelName}}"

  /**
   * @param {*} obj
   * @returns {*}
   */
  static afterFind(obj) {
    Object.entries({{collectionName}}._complexFields).forEach(([field, fieldType]) => {
      // if this connected field is included in our response object
      if (Object.hasOwnProperty.call(obj, field)) {
        // we determine the correct model this field is connected to
        const modelName = utilities.getModelFromFieldType(fieldType)

        // load that models collection
        const associatedCollection = {{collectionName}}.modelNameToCollectionMap[modelName]

        if (associatedCollection) {
          // and invoke that collection's afterFind method.
          // this allows any special query hook behavior for the associated collections to be applied to this payload as well
          obj[field] = Array.isArray(obj[field]) ? obj[field].map(v => associatedCollection.afterFind(v)) : associatedCollection.afterFind(obj[field])
        }
      }
    })

    {{#jsonFields.length}}
    // automatically JSON Parse all AWSJSON fields
    {{collectionName}}._jsonFields.forEach(field => {
      if (Object.hasOwnProperty.call(obj, field) && typeof obj[field] === 'string') {
        obj[field] = JSON.parse(obj[field])
      }
    })
    {{/jsonFields.length}}

    // lastly, we apply our own custom query hooks to this payload if one is specified
    if (typeof {{collectionName}}.custom_afterFind === 'function') {
      return {{collectionName}}.custom_afterFind(obj)
    }

    return obj
  }

  /**
   * @override
   * @param {string?} fragmentName
   * @returns { {{collectionName}} }
   */
  static as(fragmentName) {
    return new this(fragmentName)
  }
}

// this meta prop is used to call query hooks on associated models
{{collectionName}}._complexFields = {{{complexFieldsMap}}}
{{collectionName}}._jsonFields = [{{#jsonFields}}"{{.}}",{{/jsonFields}}]

{{{fragmentsStr}}}
