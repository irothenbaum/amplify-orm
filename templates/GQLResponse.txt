class GQLResponse {
  /**
   * @param {*} responseObj
   */
  constructor(responseObj) {
    this.__rawResponse = responseObj

    // we grab the internal query response
    //   -- we don't know what it's called, but we know it's the only prop on the data object
    let wrapperName = Object.keys(responseObj.data)[0]
    let internalResponse = responseObj.data[wrapperName]

    this.nextToken = internalResponse && internalResponse.nextToken
    this.payload = unwrapItemsIfNeeded(internalResponse)
  }

  /**
   * True IFF this response is a list of items
   * @returns {boolean}
   */
  isList() {
    return Array.isArray(this.payload)
  }

  /**
   * True IFF this response is a list of items AND that list is not empty
   * @returns {boolean}
   */
  hasItems() {
    return this.isList() && this.payload.length > 0
  }
}

/**
 * @param {*} obj
 * @returns {*}
 */
function unwrapItemsIfNeeded(obj) {
  if (!obj || typeof obj !== 'object') {
    return obj
  }

  if (Array.isArray(obj)) {
    return obj.map(unwrapItemsIfNeeded)
  }

  // if this object has an items & nextToken prop, we return a simple array with only those items
  if (Object.prototype.hasOwnProperty.call(obj, 'items') && Object.prototype.hasOwnProperty.call(obj, 'nextToken')) {
    return obj.items.map(unwrapItemsIfNeeded)
  }

  return Object.keys(obj).reduce((agr, k) => {
    agr[k] = unwrapItemsIfNeeded(obj[k])
    return agr
  }, {})
}

