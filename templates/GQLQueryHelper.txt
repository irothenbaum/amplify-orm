
/**
 * Auth callback to generate a new AWSAppSyncClient.
 * @callback AWSAppSyncClientFactory
 * @returns {AWSAppSyncClient|Promise<AWSAppSyncClient>}
 */

/**
 * @typedef QueryOptions
 * @property {number} maxIterations
 * @property {number} maxResults
 */

const DEFAULT_LIST_PARAMS = {
  nextToken: null,
  limit: 2000, // this is an app sync hard limit
}

const DEFAULT_MAXIMUM_ITERATIONS = 1000
const DEFAULT_MAXIMUM_RESULTS = 2000000 // (default limit * default iterations)

let instance

// this class emulates singleton using static `init` and `Instance` methods,
// but can also be constructed using `new` in case you want/need multiple references

class GQLQueryHelper {
  /**
   * @param {AWSAppSyncClientFactory} ensureClient
   */
  constructor(ensureClient) {
    if (!ensureClient || typeof ensureClient !== 'function') {
      throw new Error('Initialization of GQLQueryHelper requires an AppSync client factory')
    }
    this.__ensureClient = ensureClient
  }

  /**
   * @param {string} mutation
   * @param {*} params
   * @returns {Promise<*>}
   */
  async executeMutation(mutation, params) {
    try {
      const client = await this.__ensureClient()
      const response = await client.mutate({mutation: formatQueryString(mutation), variables: params})
      return new GQLResponse(response).payload
    } catch (resp) {
      handleQueryException(resp)
    }
  }
  /**
   * @param {string} query
   * @param {*?} params
   * @returns {Promise<*>}
   */
  async queryOnce(query, params) {
    try {
      const client = await this.__ensureClient()
      const response = await client.query({query: formatQueryString(query), variables: params})
      return new GQLResponse(response).payload
    } catch (resp) {
      handleQueryException(resp)
    }
  }

  /**
   * @param {string} query
   * @param {*?} params
   * @param {function?} afterFind
   * @returns {GQLQueryIterator}
   */
  iterativeQuery(query, params, afterFind) {
    const that = this
    const queryFormatted = formatQueryString(query)
    const queryUsesNextToken = queryHasNextTokenField(queryFormatted)
    const querySelectsToken = querySelectsNextToken(queryFormatted)

    // If you query next token, you must select next token and vice versa
    // but if both are missing it's fine, we'll just return the first set of results
    if (querySelectsToken && !queryUsesNextToken) {
      throw new Error('"nextToken" missing from params')
    } else if (queryUsesNextToken && !querySelectsToken) {
      throw new Error('"nextToken" missing from selection')
    }

    // merge this params with our defaults
    params = Object.assign({}, DEFAULT_LIST_PARAMS, params)

    return new GQLQueryIterator(async function () {
      if (this.hasCompleted) {
        return []
      }

      try {
        const client = await that.__ensureClient()
        const response = await client.query({
          query: queryFormatted,
          variables: {
            ...params,
            nextToken: this.nextToken,
          },
        })
        const resp = new GQLResponse(response)
        this.nextToken = resp.nextToken
        this.iterations++

        // if there is no next token or the next token isn't used
        if (!this.nextToken || !queryUsesNextToken) {
          this.hasCompleted = true
        }

        // if we were passed an after find function, we should invoke it
        return typeof afterFind === 'function' ? await afterFind(resp.payload) : resp.payload
      } catch (resp) {
        handleQueryException(resp)
      }
    })
  }

  /**
   * Will exhaustively search all records until we've gathered maximumResults, executed maximumIterations, or scanned all records
   * @param {string} query
   * @param {*?} params
   * @param {QueryOptions?} options
   * @returns {Promise<Array<*>>}
   */
  async queryAll(query, params, options) {
    let maximumResults = (options && options.maxResults) || DEFAULT_MAXIMUM_RESULTS
    let maximumIterations = (options && options.maxIterations) || DEFAULT_MAXIMUM_ITERATIONS

    let result = []

    const iterator = this.iterativeQuery(query, params)
    do {
      try {
        const items = await iterator.next()
        result = result.concat(items)
      } catch (err) {
        handleQueryException(err)
      }
    } while (!iterator.hasCompleted && result.length < maximumResults && --maximumIterations > 0)

    return result.slice(0, maximumResults)
  }

  // ---------------------------------------------------------------
  // STATIC FUNCTIONS:

  /**
   * @param {AWSAppSyncClientFactory} ensureClient
   * @returns {GQLQueryHelper}
   */
  static init(ensureClient) {
    if (instance) {
      throw new Error('GQLQueryHelper already initialized as Singleton')
    }
    instance = new GQLQueryHelper(ensureClient)
    return instance
  }

  /**
   * @returns {GQLQueryHelper}
   */
  static Instance() {
    if (!instance) {
      throw new Error('GQLQueryHelper has not been initialized')
    }
    return instance
  }
}

/**
 * @param {*} resp
 * @throws {Error}
 */
function handleQueryException(resp) {
  if (Array.isArray(resp.errors) && resp.errors.length > 0) {
    throw new Error(resp.errors[0].message)
  } else {
    throw resp
  }
}

/**
 * @param {string} query
 * @returns {DocumentNode}
 */
function formatQueryString(query) {
  if (typeof query === 'string') {
    return gql`
      ${query}
    `
  } else {
    return query
  }
}

/**
 * @param {DocumentNode} queryDoc
 * @returns {boolean}
 */
function queryHasNextTokenField(queryDoc) {
  const operationDef = queryDoc.definitions.find(def => def.kind === 'OperationDefinition')

  if (!operationDef || operationDef.kind !== 'OperationDefinition') {
    return false
  }

  return (
    Array.isArray(operationDef.variableDefinitions) &&
    operationDef.variableDefinitions.some(varDef => varDef.variable.name.value === 'nextToken')
  )
}

/**
 * @param {DocumentNode} queryDoc
 * @returns {boolean}
 */
function querySelectsNextToken(queryDoc) {
  const selectionContainsNextToken = selections => {
    for (const sel of selections) {
      if (sel.kind === 'Field') {
        if (sel.name.value === 'nextToken') {
          return true
        }

        if (sel.selectionSet && selectionContainsNextToken(sel.selectionSet.selections)) {
          return true
        }
      }
    }

    return false
  }

  const operationDef = queryDoc.definitions.find(def => def.kind === 'OperationDefinition')
  return selectionContainsNextToken(operationDef.selectionSet.selections)
}
